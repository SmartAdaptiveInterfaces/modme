# Generated by Django 2.2.7 on 2021-05-14 12:55

import ModME.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200, verbose_name='name')),
                ('experimentDuration', models.IntegerField(verbose_name='Duration of')),
                ('instructional_pdf', models.FileField(blank=True, help_text='This PDF will be displayed right before the Condition and should be used to give the participent insturctions.', upload_to='static/PDF/')),
                ('condition_ending_message', models.TextField(blank=True, default=' ', help_text='This will be the message that will appear when the condition has ended', verbose_name='Condition Ending Message')),
                ('notes', models.TextField(blank=True, default='', help_text='This is for internal notes only. This will not be shown to any participent.', verbose_name='Condition Notes')),
                ('task1', models.IntegerField(default=-1)),
                ('task1Data', models.CharField(default='{}', max_length=5000)),
                ('task1GUI', models.BooleanField(default=False)),
                ('task2', models.IntegerField(default=-1)),
                ('task2Data', models.CharField(default='{}', max_length=5000)),
                ('task2GUI', models.BooleanField(default=False)),
                ('task3', models.IntegerField(default=-1)),
                ('task3Data', models.CharField(default='{}', max_length=5000)),
                ('task3GUI', models.BooleanField(default=False)),
                ('task4', models.IntegerField(default=-1)),
                ('task4Data', models.CharField(default='{}', max_length=5000)),
                ('task4GUI', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Condition',
                'verbose_name_plural': 'Conditions',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('irb_pdf', models.FileField(blank=True, help_text='Please upload your IRB here. The IRB will display prior to the experiment.', upload_to='static/PDF/')),
                ('skip_irb', models.BooleanField(help_text='Selecting this will skip the Informed Consent Document page. This should ONLY be done if the participants are physically giving the ICD.', verbose_name='Skip ICD Page')),
                ('icd_confirmation_text', models.TextField(default='By clicking the \'Next\' button below, I confirm that I have read the above information, meet the eligibility criteria for participating, and agree to participate in this study.', help_text='This is the ICD confirmation text, which will be right below the PDF view of the ICD.', verbose_name='ICD Confirmation Text')),
                ('instructional_pdf', models.FileField(blank=True, help_text='This PDF will be displayed right before the experiment and should be used to give the participent insturctions.', upload_to='static/PDF/')),
                ('skip_instructions', models.BooleanField(help_text='Selecting this will skip the Instruction page. You should be done when participants have already been trained or have been physically given instructions.', verbose_name='Skip Instruction Page')),
                ('instructional_text', models.TextField(default='', help_text='This is the text below the Instuction PDF', verbose_name='Instructional Confirmation Text')),
                ('random', models.BooleanField(default=False, help_text='This will randomize the order of the Conditions (Note: This will negate any Codition order you enter below)')),
                ('conditions', models.CharField(help_text='Enter the ID number of each Condition in the order you would like them to occure in the experiment (e.g. 1,3,1,2)', max_length=5000, verbose_name='conditions')),
                ('experiment_ending_message', models.TextField(default='', help_text='This will be the message that will appear when the experiment has ended', verbose_name='Experiment Ending Message')),
                ('notes', models.TextField(blank=True, default='', help_text='This is for internal notes only. This will not be shown to any participent.', verbose_name='Experiment Notes')),
            ],
            options={
                'verbose_name': 'Experiment',
                'verbose_name_plural': 'Experiment',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startTime', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('conditionIndex', models.IntegerField()),
                ('allowEventReuse', models.BooleanField(default=False)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Condition')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Experiment')),
            ],
            options={
                'verbose_name_plural': 'Metadata',
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('fileName', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Survey',
                'verbose_name_plural': 'Surveys',
            },
        ),
        migrations.CreateModel(
            name='TableAdd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tableName', models.CharField(max_length=100)),
                ('uniqueString', models.CharField(max_length=30)),
                ('applyed', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileName', models.CharField(max_length=200)),
                ('taskName', models.CharField(max_length=200)),
                ('configurator', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('domID', models.CharField(max_length=200)),
                ('state', models.CharField(max_length=200)),
                ('mouseX', models.FloatField()),
                ('mouseY', models.FloatField()),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Survey')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('study', models.CharField(default='', max_length=500)),
            ],
            options={
                'unique_together': {('name', 'study')},
            },
        ),
        migrations.CreateModel(
            name='ResourceTank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('tankNumber', models.IntegerField()),
                ('state', models.FloatField()),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
            options={
                'verbose_name': 'Resource Tank',
                'verbose_name_plural': 'Resource Tanks',
            },
        ),
        migrations.CreateModel(
            name='ResourceSwitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('switchNumber', models.IntegerField()),
                ('state', models.CharField(max_length=200)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
            options={
                'verbose_name': 'Resource Switch',
                'verbose_name_plural': 'Resource Switches',
            },
        ),
        migrations.CreateModel(
            name='RemoteSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userSessionCode', models.CharField(default=ModME.models.RemoteSession.code_generator, help_text='Send this code to your remote participant', max_length=200, verbose_name='User Session Code')),
                ('userCompletionCode', models.CharField(default=ModME.models.RemoteSession.code_generator, help_text='The participant will receive this code after they complete their experiment', max_length=200, verbose_name='User Completion Code')),
                ('userEmail', models.CharField(blank=True, max_length=200, verbose_name='User Email Address')),
                ('sessionCompleteStatus', models.BooleanField(default=False, help_text='ONLY select this if you are manually logging that a participant completed their experiment session', verbose_name='Completion Status')),
                ('userExperiment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Experiment')),
            ],
            options={
                'verbose_name': 'Remote Session',
                'verbose_name_plural': 'Remote Sessions',
            },
        ),
        migrations.CreateModel(
            name='NasaTlx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('mental', models.IntegerField(default=-1)),
                ('physical', models.IntegerField(default=-1)),
                ('temporal', models.IntegerField(default=-1)),
                ('performance', models.IntegerField(default=-1)),
                ('effort', models.IntegerField(default=-1)),
                ('frustration', models.IntegerField(default=-1)),
                ('fatigue', models.IntegerField(default=-1)),
                ('boredom', models.IntegerField(default=-1)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
            options={
                'verbose_name': 'Nasa TLX',
                'verbose_name_plural': 'Nasa TLX',
            },
        ),
        migrations.CreateModel(
            name='MouseTracking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('domID', models.CharField(max_length=200)),
                ('targetX', models.FloatField()),
                ('targetY', models.FloatField()),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
            options={
                'verbose_name': 'Mouse Tracking',
                'verbose_name_plural': 'Mouse Trackings',
            },
        ),
        migrations.AddField(
            model_name='metadata',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Participant'),
        ),
        migrations.AddField(
            model_name='metadata',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Session'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Task')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('eventType', models.CharField(max_length=200)),
                ('chart', models.CharField(max_length=200)),
                ('arg', models.CharField(max_length=200)),
                ('domID', models.CharField(max_length=200)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ModME.Metadata')),
            ],
        ),
        migrations.AddField(
            model_name='condition',
            name='surveys',
            field=models.ManyToManyField(blank=True, help_text='Hold down "Control", or "Command" on a Mac, to <em>de</em>select one.<br/>', to='ModME.Survey'),
        ),
        migrations.AlterUniqueTogether(
            name='metadata',
            unique_together={('condition', 'participant', 'session', 'experiment', 'conditionIndex')},
        ),
    ]
